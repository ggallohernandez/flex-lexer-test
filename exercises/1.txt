# ENUNCIADO

Desarrollar una gramática en formato BNF para reconocer expresiones aritméticas simples (sumas, restas, multiplicaciones y divisiones) que operan con constantes enteras e identificadores 

# ALGORITMO
Cuando el pivote esta ante un Ent     -> Copiar las reglas de producción del Ent
Cuando el pivote esta frente a un Ent -> Copiar las reglas de producción que avanzarian al mismo tiempo.

# RESOLUCIÓN

### Notación BNF
R =

0)   <assign'>    ::= <assign> 
1)   <assign>     ::= id = <expression>
2)   <expression> ::= <expresion> + <term>
3)   <expression> ::= <expresion> - <term>
4)   <expression> ::= <term>
5)   <term>       ::= <term> * <factor>
6)   <term>       ::= <term> / <factor>
/)   <term>       ::= <factor>
7)   <factor>     ::= int

### Gramática
Ent = {<assign>, <expression>, <term>, <factor>}
Et  = {id, =, +, -, *, /, int}

G = (Ent, Et, <assign'>, R) # Libre de contexto

EJEMPLO
-------

var F = 2 + 2 * 3 / 2 - 2


Tree
----

Step 1
    <assign'>
       |
    <assign>

Step 2
        <assign'>
           |
        <assign>
       /   |    \
     id    =    <expression>

 Step 3
        <assign'>
           |
        <assign>
       /   |    \
     id    =    <expression>
                /    |     \
      <expression>   -    <term>

Step 4
        <assign'>
           |
        <assign>
       /   |    \
     id    =     <expression>
                /     |      \
      <expression>    -      <term>
                               |
                             <factor>

Step 5
        <assign'>
           |
        <assign>
       /   |    \
     id    =     <expression>
                /     |      \
      <expression>    -      <term>
                                |
                             <factor>
                                |
                               int

Step 5
            <assign'>
               |
            <assign>
           /   |    \
         id    =     <expression>
                    /     |      \
          <expression>    -      <term>
         /     |     \              |
 <expression>  +   <term>     <factor>
                                    |
                                   int

Step 7
            <assign'>
               |
            <assign>
           /   |    \
         id    =     <expression>
                    /     |      \
          <expression>    -      <term>
         /     |     \              |
 <expression>  +   <term>     <factor>
                      |             |
                  <factor>         int

Step 8
            <assign'>
               |
            <assign>
           /   |    \
         id    =     <expression>
                    /     |      \
          <expression>    -      <term>
         /     |     \              |
 <expression>  +   <term>     <factor>
                      |             |
                  <factor>         int
                      |
                     int 

Step 8
                            <assign'>
                               |
                            <assign>
                           /   |    \
                         id    =     <expression>
                                    /     |      \
                          <expression>    -      <term>
                         /     |     \              |
                 <expression>  +   <term>        <factor>
                      |              |              |
                    <term>        <factor>         int
                   /  |   \          |                
              <term>  *   <factor>  int            
                                   
 Step 8                                                                                     
                             <assign'>
                                |
                             <assign>
                            /   |    \
                          id    =     <expression>
                                     /     |      \
                           <expression>    -      <term>
                          /     |     \              |
                  <expression>  +   <term>        <factor>
                       |              |              |
                     <term>        <factor>         int
                    /  |   \          |                
               <term>  *   <factor>  int            
                              |
                             int 

Step 8                                                                                     
                            <assign'>
                               |
                            <assign>
                           /   |    \
                         id    =     <expression>
                                    /     |      \
                          <expression>    -      <term>
                         /     |     \              |
                 <expression>  +   <term>        <factor>
                      |              |              |
                    <term>        <factor>         int
                   /  |   \          |                
              <term>  *   <factor>  int            
             /  |   \        |
         <term> / <factor>  int 

Step 8                                                                                     
                            <assign'>
                               |
                            <assign>
                           /   |    \
                         id    =     <expression>
                                    /     |      \
                          <expression>    -      <term>
                         /     |     \              |
                 <expression>  +   <term>        <factor>
                      |              |              |
                    <term>        <factor>         int
                   /  |   \          |                
              <term>  *   <factor>  int            
             /  |   \        |
         <term> / <factor>  int 
                     |
                    int 

Step 8                                                                                     
                            <assign'>
                               |
                            <assign>
                           /   |    \
                         id    =     <expression>
                                    /     |      \
                          <expression>    -      <term>
                         /     |     \              |
                 <expression>  +   <term>        <factor>
                      |              |              |
                    <term>        <factor>         int
                   /  |   \          |                
              <term>  *   <factor>  int            
             /  |   \        |
         <term> / <factor>  int 
            |        |
        <factor>    int 

Step 8                                                                                     
                            <assign'>
                               |
                            <assign>
                           /   |    \
                         id    =     <expression>
                                    /     |      \
                          <expression>    -      <term>
                         /     |     \              |
                 <expression>  +   <term>        <factor>
                      |              |              |
                    <term>        <factor>         int
                   /  |   \          |              |  
              <term>  *   <factor>  int             2
             /  |   \        |       |
         <term> / <factor>  int      2 
            |        |       | 
        <factor>    int      2
            |        |
           int       3 
            |
            2

id = 2 / 3 * 2 + 2 - 2

<< HASTA EL ARBOL ESTA BIEN REVISAR EL ANALISIS LEXICO >>

ESTADO 0
--------
<assign'> ::= *<assign>
<assign>  ::= *id = <expression>

(0, <assign>)
ESTADO 1
----
 <assign'> ::= <assign>*

(0, id)
ESTADO 2
--------
 <assign> ::= id *= <expression>

(2, =)
ESTADO 3
--------
 <assign> ::= id = *<expression>
 <expression> ::= *<expresion> - <term>
 <expression> ::= *<expresion> + <term>
 <expression> ::= *<term>
 <term>       ::= *<term> * <factor>
 <term>       ::= *<term> / <factor>
 <term>       ::= *<factor>
 <factor>     ::= *int

(3, <expresion>)
ESTADO 4
--------
 <assign> ::= id = <expression>*
 <expression> ::= <expresion> *- <term>
 <expression> ::= <expresion> *+ <term>

(3, <term>)
ESTADO 5
--------
 <expression> ::= <term>*
<term>       ::= <term> ** <factor>
<term>       ::= <term> */ <factor>

(3, <factor>) (8, <factor>) (9, <factor>)
ESTADO 6
--------
 <term> ::= <factor>*

(3, int) (8, int) (9, int) (10, int (11, int))
ESTADO 7
--------
 <factor> ::= int*

(4, -)
ESTADO 8
--------
 <expression> ::= <expresion> - *<term>
 <term>       ::= *<term> * <factor>
 <term>       ::= *<term> / <factor>
 <term>       ::= *<factor>
 <factor>     ::= *int

(4, +)
ESTADO 9
--------
 <expression> ::= <expresion> + *<term>
 <term>       ::= *<term> * <factor>
 <term>       ::= *<term> / <factor>
 <term>       ::= *<factor>
 <factor>     ::= *int


(5, *) (12, *) (13, *)
ESTADO 10
---------
 <term>   ::= <term> * *<factor>
 <factor> ::= *int

(5, /) (12, /) (13, *)
ESTADO 11
---------
 <term>   ::= <term> / *<factor>
 <factor> ::= *int

(8, <term>)
ESTADO 12
---------
 <expression> ::= <expresion> - <term>*
 <term>       ::= <term> ** <factor>
 <term>       ::= <term> */ <factor>

(9, <term>)
ESTADO 13
---------
 <expression> ::= <expresion> + <term>*
 <term>       ::= <term> ** <factor>
 <term>       ::= <term> */ <factor>

(10, <factor>)
ESTADO 14
---------
 <term>   ::= <term> * <factor>*

(11, <factor>)
ESTADO 15
---------
 <term>   ::= <term> / <factor>*

|asd|asd|dasdasdsad|
|gagsgd|asdasda|asdas|

